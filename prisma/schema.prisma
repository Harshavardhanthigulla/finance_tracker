generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  clerkId            String?              @unique
  name               String
  email              String               @unique
  password           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  phoneNumber        String
  expenses           Expense[]
  expenseparticipant ExpenseParticipant[]
  groups             Group[]              @relation("UserGroups")
  groupexpense       GroupExpense[]
  GroupMember        GroupMember[]
  loans              Loan[]
  notifications      Notification[]
}

model Loan {
  id              String        @id @default(uuid())
  userId          String
  lenderName      String
  principalAmount Float
  interestRate    Float
  emiAmount       Float
  dueDate         DateTime
  closingDate     DateTime?
  status          String        @default("active")
  createdAt       DateTime      @default(now())
  lenderPhNumber  String
  loanType        LoanType
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  payments        LoanPayment[]
}

model LoanPayment {
  id          String   @id @default(uuid())
  loanId      String
  amount      Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  loan        Loan     @relation(fields: [loanId], references: [id])
}

model Expense {
  id              String   @id @default(uuid())
  userId          String
  category        String
  amount          Float
  type            String
  description     String?
  transactionDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Group {
  id        String         @id @default(uuid())
  groupName String
  createdBy String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation("UserGroups", fields: [createdBy], references: [id])
  expenses  GroupExpense[]
  members   GroupMember[]
}

model GroupMember {
  id      String @id @default(uuid())
  groupId String
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model GroupExpense {
  id           String               @id @default(uuid())
  groupId      String
  paidBy       String
  amount       Float
  description  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  participants ExpenseParticipant[]
  group        Group                @relation(fields: [groupId], references: [id])
  user         User                 @relation(fields: [paidBy], references: [id])
}

model ExpenseParticipant {
  id             String       @id @default(uuid())
  groupExpenseId String
  userId         String
  share          Float
  groupExpense   GroupExpense @relation(fields: [groupExpenseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum LoanType {
  SI
  CI
  GN
}
